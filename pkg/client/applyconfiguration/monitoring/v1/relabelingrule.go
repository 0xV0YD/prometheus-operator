// Copyright The prometheus-operator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// RelabelingRuleApplyConfiguration represents a declarative configuration of the RelabelingRule type for use
// with apply.
type RelabelingRuleApplyConfiguration struct {
	SourceLabels []string `json:"sourceLabels,omitempty"`
	TargetLabel  *string  `json:"targetLabel,omitempty"`
	Replacement  *string  `json:"replacement,omitempty"`
}

// RelabelingRuleApplyConfiguration constructs a declarative configuration of the RelabelingRule type for use with
// apply.
func RelabelingRule() *RelabelingRuleApplyConfiguration {
	return &RelabelingRuleApplyConfiguration{}
}

// WithSourceLabels adds the given value to the SourceLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SourceLabels field.
func (b *RelabelingRuleApplyConfiguration) WithSourceLabels(values ...string) *RelabelingRuleApplyConfiguration {
	for i := range values {
		b.SourceLabels = append(b.SourceLabels, values[i])
	}
	return b
}

// WithTargetLabel sets the TargetLabel field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TargetLabel field is set to the value of the last call.
func (b *RelabelingRuleApplyConfiguration) WithTargetLabel(value string) *RelabelingRuleApplyConfiguration {
	b.TargetLabel = &value
	return b
}

// WithReplacement sets the Replacement field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replacement field is set to the value of the last call.
func (b *RelabelingRuleApplyConfiguration) WithReplacement(value string) *RelabelingRuleApplyConfiguration {
	b.Replacement = &value
	return b
}
